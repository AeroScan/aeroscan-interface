import React, { useState, useRef, useContext } from "react";
import Draggable from "react-draggable"; 
import md5 from "md5";
import * as yup from "yup";
import { useForm } from "react-hook-form";
import { QuestionCircleFilled, CloseOutlined } from "@ant-design/icons";
import { Button, Tooltip } from "antd";
import "antd/dist/antd.css";
import { yupResolver } from "@hookform/resolvers/yup";
import { GlobalContext } from "../../context";
import { ModalHeader, AntModal } from "../modal/style";

const GeneratePasswordModal = () => {

  const gerenatePasswordSchema = yup.object().shape({
    email: yup.string().email('Invalid email format').required('The field is required')
  });
  const { handleSubmit, register, formState: { errors } } = useForm({ resolver: yupResolver(gerenatePasswordSchema) });
  const { generatePassword, setGeneratePassword } = useContext(GlobalContext);
  const draggleRef = useRef(null);
  const [disabled, setDisabled] = useState(true);
  const [bounds, setBounds] = useState({
    left: 0,
    top: 0,
    bottom: 0,
    right: 0,
  });
  
  const onStart = (_event, uiData) => {
    const { clientWidth, clientHeight } = window.document.documentElement;
    const targetRect = draggleRef.current?.getBoundingClientRect();
    if (!targetRect) {
      return;
    }
    setBounds({
      left: -targetRect.left + uiData.x,
      right: clientWidth - (targetRect.right - uiData.x),
      top: -targetRect.top + uiData.y,
      bottom: clientHeight - (targetRect.bottom - uiData.y),
    });
  };

  const onSubmit = data => {
    gerenatePasswordSchema.validate(data)
      .then(async () => {
        const emailHash = md5(data.email.split('@')[0]);
        const password = `${emailHash.slice(0, 5)}${emailHash.slice(emailHash.length - 5, emailHash.length)}`;
        document.getElementById("password").value = password;
      })
      .catch(err => {
        console.log(err);
      });
  }

  const closeModal = () => {
    setGeneratePassword({
      modalOpen: false,
    });
  };

  return (
    <AntModal
      title={
        <ModalHeader
          onMouseOver={() => disabled && setDisabled(false)}
          onMouseOut={() => setDisabled(true)}
        >
          <CloseOutlined className="closeIcon" onClick={closeModal} />
          <h1>Generate Password</h1>
        </ModalHeader>
      }
      open={generatePassword.modalOpen}
      onCancel={closeModal}
      footer={null}
      width={"40%"}
      
      closable={false}
      maskClosable
      centered
      destroyOnClose
      modalRender={(modal) => (
        <Draggable
          disabled={disabled}
          bounds={bounds}
          nodeRef={draggleRef}
          onStart={(event, uiData) => onStart(event, uiData)}
        >
          <div ref={draggleRef}>{modal}</div>
        </Draggable>
      )}
    >
      <div>
        <form onSubmit={handleSubmit(onSubmit)} id="modalForm">
          <div className='formContainer'>
            <label htmlFor='email'>E-mail:</label>
            <input
              type='text'
              id='email'
              placeholder='email'
              {...register("email")}
            />
            <Tooltip placement="right" title={'This field generate a password through the e-mail.'} overlayStyle={{ fontSize: '3rem' }}>
              <QuestionCircleFilled />
            </Tooltip>
          </div>
          <span className='error'>{errors.email?.message}</span>
          <div className='formContainer'>
            <label htmlFor='password'>Password:</label>
            <input
              type='text'
              id='password'
              placeholder='password'
              {...register("password", { disabled: true })}
            />
            <Tooltip placement="right" title={'This field show the password generated by md5.'} overlayStyle={{ fontSize: '3rem' }}>
              <QuestionCircleFilled />
            </Tooltip>
          </div>
        </form>
        <div className="buttons-container">
          <Button htmlType="submit" form="modalForm">
            Process
          </Button>
          <Button className="cancel" onClick={closeModal}>
            Cancel
          </Button>
        </div>
      </div>
    </AntModal>
  );
}

export default GeneratePasswordModal;